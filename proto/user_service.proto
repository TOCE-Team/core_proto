syntax = "proto3";
package user_service;
//package curriculum_service;

enum Role {
    Subscriber = 0;
    Moderator  = 1;
    Instructor = 2;
    Admin      = 3;
}

enum Level {
    Beginner     = 0;
    Junior       = 1;
    Intermediate = 2;
    Senior       = 3;
    Expert       = 4;
    Leader       = 5;
    Professor    = 6;
    Master       = 7;
}

/*
    Has password + isDeleted + paginationId fields
    This model can only be used for the Admin
*/
message UserBase {
    string          id                = 1;
    int64           paginationId      = 2;
    optional string firstName         = 3; 
    optional string lastName          = 4;
    string          nickname          = 5;
    string          email             = 6;
    string          password          = 7;
    Role            role              = 8;
    Level           level             = 9;
    optional string introductionBrief = 10;
    optional string image             = 11;
    bool            isDeleted         = 12;
    int32           totalCredit       = 13;
    int64           createdAt         = 14;
    int64           updatedAt         = 15;
}

/*
    No password + isDeleted fields
    Filtered User model
*/
message User {
    string          id                = 1;
    int64           paginationId      = 2;
    optional string firstName         = 3; 
    optional string lastName          = 4;
    string          nickname          = 5;
    string          email             = 6;
    Role            role              = 7;
    Level           level             = 8;
    optional string introductionBrief = 9;
    optional string image             = 10;
    int32           totalCredit       = 11;
    int64           createdAt         = 12;
    int64           updatedAt         = 13;
}

/*
    No password + isDeleted + paginationId + introduction + image fields 
    since those fields are very large to query, not very efficient to search
    password and isDeleted is removed due to privacy
    Include new fields such as offset and limit to do pagination
*/
message UserQuery {
    optional int64  offset      = 1;
    optional int32  limit       = 2;

    optional string id          = 3;
    optional string firstName   = 4;
    optional string lastName    = 5;
    optional string nickname    = 6;
    optional string email       = 7;
    optional Role   role        = 8;
    optional Level  level       = 9;
    optional int32  totalCredit = 10;
    optional int64  createdAt   = 11;
    optional int64  updatedAt   = 12;
}

message Empty {}

message UserList {
    repeated User users = 1;
}

message GetUserByIdProtoReq {
    string id = 1;
}

message LoginUserProtoReq {
    string nickname = 1;
    string password = 2;
}

message LoginWalletUserProtoReq {
	string walletId = 1;
	string network = 2;
}

message GetUserByEmailProtoReq {
    string email = 1;
}

message CreateUserProtoReq {
    string nickname = 1;
    string email    = 2;
    string password = 3;
}

message UpdateUserProtoReq {
    string          id                = 1;
    optional string firstName         = 2;
    optional string lastName          = 3;
    optional string nickname          = 4;
    optional string email             = 5;
    optional string introductionBrief = 6;
    optional string image             = 7;
    string          password          = 8;
    optional string newPassword       = 9;
}

message DeleteUserProtoReq {
    string id       = 1;
    string password = 2;
}


message OAuthState {
    string csrfState = 1;
    string pkceCodeVerifier = 2;
}

message DeleteOAuthStateProtoReq {
    string csrfState = 1;
}

/* UserInformation */
message UserInformationBase {
    string user_id                       = 1;
    optional string job_title            = 2;
    optional string location             = 3;
    optional string company              = 4;
    optional string bio                  = 5; 
    optional string job_type             = 6;
    optional int32 year_of_experience    = 7;
    optional string industry             = 8;
    optional int64 birthday              = 9;
    optional string organization         = 10;
    optional string education_level      = 11;
    optional string education            = 12;
    repeated string social_link          = 13;
}

message GetUserInformationProtoReq{
    string user_id  = 1;
}

message UpdateUserInformationProtoReq{
    string user_id                       = 1;
    optional string job_title            = 2;
    optional string location             = 3;
    optional string company              = 4;
    optional string bio                  = 5; 
    optional string job_type             = 6;
    optional int32 year_of_experience    = 7;
    optional string industry             = 8;
    optional int64 birthday              = 9;
    optional string organization         = 10;
    optional string education_level      = 11;
    optional string education            = 12;
    repeated string social_link          = 13;
}


/*Team*/
message TeamBase {
    string 	    id 		  		= 1;
    int64       paginationId    = 2;
    string 		name 	   		= 3;
	string 		description 	= 4;
	string  	owner 			= 5;
    int64  		createdAt   	= 6;
    int64  		updatedAt   	= 7;
	bool 		isDeleted 		= 8;
}

message TeamListProtoReq {
    optional int64  offset      = 1;
    optional int64  limit       = 2;
    optional string name 	    = 3;
    optional string owner       = 4;
    optional int64  createdAt   = 5;
    optional int64  updatedAt   = 6;
}

message TeamListProtoRes {
    repeated TeamBase teams = 1;
}

message GetTeamByIdProtoReq {
    string id = 1;
}


message CreateTeamProtoReq {
    string 	name 	   	= 1;
    string 	description	= 2;
	string 	owner 	    = 3;
}

message UpdateTeamProtoReq {
    string 			    id 			= 1;
    optional string 	name 	   	= 2;
	optional string 	description = 3;
	optional string  	owner 		= 4;
}

message DeleteTeamProtoReq {
    string id = 1;
}

message CourseTeamBase {
    string courseId     = 1;
    string teamId       = 2;
    int64 expiredTime   = 3;
}

message CreateCourseTeamProtoReq {
    string courseId     = 1;
    string teamId       = 2;
    int64 expiredTime   = 3;
}

message GetCourseTeamProtoReq {
    string courseId             = 1;
    optional string teamId      = 2;
}

message DeleteCourseTeamProtoReq {
    string courseId     = 1;
    string teamId       = 2;
}

message AddTeamMemberProtoReq{
	string teamId = 1;
	string userId = 2;
} 

message GetTeamMemberProtoReq {
	string          			teamId      = 1;
	optional int64  			offset      = 2;
    optional int32  			limit       = 3;
    optional string 			id          = 4;
    optional string 			firstName   = 5;
    optional string 			lastName    = 6;
    optional string 			nickname    = 7;
    optional string 			email       = 8;
    optional Role               role        = 9;
    optional Level              level       = 10;
    optional int32  			totalCredit = 11;
    optional int64  			createdAt   = 12;
    optional int64  			updatedAt   = 13;

}

message DeleteTeamMemberProtoReq{
    string teamId = 1;
	string userId = 2;
}

// Email
enum EmailType {
    Invite       = 0;
    Notify       = 1;
}

message EmailBase {
    string 	    id 		  		= 1;
    int64       paginationId    = 2;
    EmailType 	email_type 	   	= 3;
	string  	subject 		= 4;
    string      header          = 5;
    string      body            = 6;
    int64  		createdAt   	= 7;
    int64  		updatedAt   	= 8;
	bool 		isDeleted 		= 9;
}

message EmailListProtoReq {
    optional int64      offset      = 1;
    optional int64      limit       = 2;
    optional EmailType  email_type   = 3;
    optional int64      createdAt   = 4;
    optional int64      updatedAt   = 5;
}

message EmailListProtoRes {
    repeated EmailBase emails = 1;
}

message GetEmailByIdProtoReq {
    string id = 1;
}

message CreateEmailProtoReq {
    EmailType 	email_type 	   	= 1;
	string  	subject 		= 2;
    string      header          = 3;
    string      body            = 4;
}

message UpdateEmailProtoReq {
    string 			    id 			    = 1;
    optional EmailType  email_type 	   	= 2;
	optional string  	subject 		= 3;
    optional string     header          = 4;
    optional string     body            = 5;
}

message DeleteEmailProtoReq {
    string id = 1;
}

message UpdateRoleUserProtoReq {
	string id = 1;
	Role role = 2;
}

message GetUserByWalletIdProtoReq {
	string walletId = 1;
}

message WalletUser {
	string Id   = 1;
	string walletId = 2;
	string network = 3;
}

service UserServiceProtocol {
    // Normal user calls

    rpc GetUsersCall(UserQuery)                   returns (UserList);
    rpc GetUserByIdCall(GetUserByIdProtoReq)      returns (User);
    rpc GetUserByLoginInfoCall(LoginUserProtoReq) returns (User);
    rpc CreateUserCall(CreateUserProtoReq)        returns (User);
    rpc UpdateUserCall(UpdateUserProtoReq)        returns (User);
    rpc DeleteUserCall(DeleteUserProtoReq)        returns (Empty);
	rpc CreateUserWalletLoginCall(LoginWalletUserProtoReq)    returns (WalletUser);
	rpc GetUserByWalletIdCall(GetUserByWalletIdProtoReq) returns(WalletUser);
	rpc GetWalletUserByIdCall(GetUserByIdProtoReq) returns(WalletUser);

    // For google login
    rpc CreateOAuthStateCall(OAuthState)               returns (OAuthState);
    rpc GetUserByEmail(GetUserByEmailProtoReq)         returns (User);
    rpc DeleteOAuthStateCall(DeleteOAuthStateProtoReq) returns (OAuthState);

    // Admin user calls

    // This command overrides a certain user by id, however it doesn't change the user id
    rpc OverrideUserCall(UserBase)               returns (UserBase);
    rpc AdminDeleteUserCall(GetUserByIdProtoReq) returns (Empty);
    rpc RestoreUserCall(GetUserByIdProtoReq) returns (Empty);

    // User Information
    //rpc CreateUserInformationCall(CreateUserInformationProtoReq)   returns (UserInformationBase);
    rpc GetUserInformationCall(GetUserInformationProtoReq)         returns (UserInformationBase);
    rpc UpdateUserInformationCall(UpdateUserInformationProtoReq)   returns (UserInformationBase);

    // For team
    rpc GetTeamsCall(TeamListProtoReq)                      returns (TeamListProtoRes);
    rpc GetTeamByIdCall(GetTeamByIdProtoReq)                returns (TeamBase);
    rpc CreateTeamCall(CreateTeamProtoReq)                  returns (TeamBase);
    rpc UpdateTeamCall(UpdateTeamProtoReq)                  returns (TeamBase);
    rpc DeleteTeamCall(DeleteTeamProtoReq)                  returns (Empty);

    rpc GetCourseTeamCall(GetCourseTeamProtoReq)                returns (TeamListProtoRes);
    rpc CreateCourseTeamCall(CreateCourseTeamProtoReq)          returns (CourseTeamBase);
    rpc DeleteCourseTeamCall(DeleteCourseTeamProtoReq)          returns (Empty);

    rpc AddTeamMemberCall(AddTeamMemberProtoReq)            returns (Empty);
	rpc GetTeamMemberCall(GetTeamMemberProtoReq)            returns (UserList);
    rpc DeleteTeamMemberCall(DeleteTeamMemberProtoReq)      returns (Empty);
    rpc RemoveTeamMemberCall(DeleteTeamMemberProtoReq)      returns (Empty);
	rpc RestoreTeamMemberCall(DeleteTeamMemberProtoReq)     returns (Empty);

    // Email
    rpc GetEmailsCall(EmailListProtoReq)                      returns (EmailListProtoRes);
    rpc GetEmailByIdCall(GetEmailByIdProtoReq)                returns (EmailBase);
    rpc CreateEmailCall(CreateEmailProtoReq)                  returns (EmailBase);
    rpc UpdateEmailCall(UpdateEmailProtoReq)                  returns (EmailBase);
    rpc DeleteEmailCall(DeleteEmailProtoReq)                  returns (Empty);
	
	rpc UpdateRoleUserCall(UpdateRoleUserProtoReq)            returns (User);

}
