syntax = "proto3";
package user_service;

enum Role {
    Subscriber = 0;
    Moderator  = 1;
    Instructor = 2;
    Admin      = 3;
}

enum Level {
    Beginner     = 0;
    Junior       = 1;
    Intermediate = 2;
    Senior       = 3;
    Expert       = 4;
    Leader       = 5;
    Professor    = 6;
    Master       = 7;
}

/*
    Has password + isDeleted + paginationId fields
    This model can only be used for the Admin
*/
message UserBase {
    string          id                = 1;
    int64           paginationId      = 2;
    optional string firstName         = 3; 
    optional string lastName          = 4;
    string          nickname          = 5;
    string          email             = 6;
    string          password          = 7;
    Role            role              = 8;
    Level           level             = 9;
    optional string introductionBrief = 10;
    optional string image             = 11;
    bool            isDeleted         = 12;
    int32           totalCredit       = 13;
    int64           createdAt         = 14;
    int64           updatedAt         = 15;
}

/*
    No password + isDeleted fields
    Filtered User model
*/
message User {
    string          id                = 1;
    int64           paginationId      = 2;
    optional string firstName         = 3; 
    optional string lastName          = 4;
    string          nickname          = 5;
    string          email             = 6;
    Role            role              = 7;
    Level           level             = 8;
    optional string introductionBrief = 9;
    optional string image             = 10;
    int32           totalCredit       = 11;
    int64           createdAt         = 12;
    int64           updatedAt         = 13;
}

/*
    No password + isDeleted + paginationId + introduction + image fields 
    since those fields are very large to query, not very efficient to search
    password and isDeleted is removed due to privacy
    Include new fields such as offset and limit to do pagination
*/
message UserQuery {
    optional int64  offset      = 1;
    optional int32  limit       = 2;

    optional string id          = 3;
    optional string firstName   = 4;
    optional string lastName    = 5;
    optional string nickname    = 6;
    optional string email       = 7;
    optional Role   role        = 8;
    optional Level  level       = 9;
    optional int32  totalCredit = 10;
    optional int64  createdAt   = 11;
    optional int64  updatedAt   = 12;
}

message Empty {}

message UserList {
    repeated User users = 1;
}

message GetUserByIdProtoReq {
    string id = 1;
}

message LoginUserProtoReq {
    string nickname = 1;
    string password = 2;
}

message GetUserByEmailProtoReq {
    string email = 1;
}

message CreateUserProtoReq {
    string nickname = 1;
    string email    = 2;
    string password = 3;
}

message UpdateUserProtoReq {
    string          id                = 1;
    optional string firstName         = 2;
    optional string lastName          = 3;
    optional string nickname          = 4;
    optional string email             = 5;
    optional string introductionBrief = 6;
    optional string image             = 7;
    string          password          = 8;
    optional string newPassword       = 9;
}

message DeleteUserProtoReq {
    string id       = 1;
    string password = 2;
}

message OAuthState {
    string csrfState = 1;
    string pkceCodeVerifier = 2;
}

message DeleteOAuthStateProtoReq {
    string csrfState = 1;
}

service UserServiceProtocol {
    // Normal user calls

    rpc GetUsersCall(UserQuery)                   returns (UserList);
    rpc GetUserByIdCall(GetUserByIdProtoReq)      returns (User);
    rpc GetUserByLoginInfoCall(LoginUserProtoReq) returns (User);
    rpc CreateUserCall(CreateUserProtoReq)        returns (User);
    rpc UpdateUserCall(UpdateUserProtoReq)        returns (User);
    rpc DeleteUserCall(DeleteUserProtoReq)        returns (Empty);

    // For google login
    rpc CreateOAuthStateCall(OAuthState)               returns (OAuthState);
    rpc GetUserByEmail(GetUserByEmailProtoReq)         returns (User);
    rpc DeleteOAuthStateCall(DeleteOAuthStateProtoReq) returns (OAuthState);

    // Admin user calls

    // This command overrides a certain user by id, however it doesn't change the user id
    rpc OverrideUserCall(UserBase)               returns (UserBase);
    rpc AdminDeleteUserCall(GetUserByIdProtoReq) returns (Empty);
}