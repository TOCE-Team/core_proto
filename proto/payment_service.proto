syntax = "proto3";
package  payment_service;

enum PaymentTypeProtoModel {
    Crypto = 0;
    Fiat   = 1;
	Other  = 2;
}

enum PaymentStateProtoModel {
    Pending     = 0;
    Confirming  = 1;
    Successful  = 2;
    Failed      = 3;
    Cancelled    = 4;
	Deactive    = 5;
	Dispute     = 6;
}

message CoursePaymentProtoModel {
    string                  payment_id      = 1;
    string                  course_id       = 2;
    string                  user_id         = 3;
    PaymentTypeProtoModel   payment_type    = 4;
    PaymentStateProtoModel  payment_state   = 5;
    string                  payment_info_id = 6;
    string                  notes           = 7;
    bool                    isDeleted       = 8;
    int64                   createdAt       = 9;
    int64                   updatedAt       = 10;
    string                  image           = 11;
    int64                   amount          = 12;
	optional string         approve_by      = 13;
	optional int64          confirmed_at    = 14;
}

message GetCoursePaymentProtoReq {
    string payment_id        = 1;
}

message GetListCoursePaymentProtoReq {
    optional string payment_id                      = 1;
    optional string user_id                         = 2;
    optional string course_id                       = 3;
    optional PaymentTypeProtoModel   payment_type   = 4;
    repeated PaymentStateProtoModel  payment_state  = 5;
    optional int64  page                            = 6;
    optional int32  limit                           = 7;
	optional int64  createdAt                       = 8;
	optional int64  updatedAt                       = 9;
	optional string notes                           = 10;
	optional string approve_by                      = 11;
	optional int64  confirmedAt                     = 12;
}

message Paging {
	int32	limit         = 1;
	int64   total         = 2;
	int64	current_page  = 3;
	int64	total_page    = 4;
}

message GetListCoursePaymentProtoRes {
    repeated CoursePaymentProtoModel course_payments = 1;
	Paging paging = 2;
}

message CreateCoursePaymentProtoReq {
    string                  course_id       = 1;
    string                  user_id         = 2;
	PaymentStateProtoModel  payment_state   = 3;
    PaymentTypeProtoModel   payment_type    = 4;
    string                  payment_info_id = 6;
    string                  notes           = 7;
    string                  image           = 8;
    int64                   amount          = 9;
}

message GetIdAndStateCoursePaymentProtoReq {
	string user_id = 1;
	string course_id = 2;
}

message UpdateCoursePaymentProtoReq {
    string                           payment_id      = 1;
	optional PaymentTypeProtoModel   payment_type    = 2;
    optional PaymentStateProtoModel  payment_state   = 3;
    optional string                  image           = 4;
	optional string                  approveBy       = 5;
	optional string                  notes           = 6;
	optional string                  payment_info_id = 7;
	optional int64                   confirmed_at    = 8;
}

message DeleteCoursePaymentProtoReq {
    string payment_id = 1;
}

message Empty {}

service PaymentServiceProto{
  // Course Payment
  rpc GetCoursePaymentCall(GetCoursePaymentProtoReq) returns(CoursePaymentProtoModel);
  rpc GetListCoursePaymentCall(GetListCoursePaymentProtoReq) returns(GetListCoursePaymentProtoRes);
  rpc CreateCoursePaymentCall(CreateCoursePaymentProtoReq) returns(CoursePaymentProtoModel);
  rpc UpdateCoursePaymentCall(UpdateCoursePaymentProtoReq) returns(CoursePaymentProtoModel);
  rpc DeleteCoursePaymentCall(DeleteCoursePaymentProtoReq) returns(Empty);
  rpc GetIdStateCoursePaymentCall(GetIdAndStateCoursePaymentProtoReq) returns (CoursePaymentProtoModel);
}
