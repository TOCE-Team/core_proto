syntax = "proto3";
package user_service;
//package curriculum_service;

enum Role {
    Subscriber = 0;
    Moderator  = 1;
    Instructor = 2;
    Admin      = 3;
}
enum PlatformPartnerRole {
    Foundation = 0;
    Sponsor = 1;
    Partner = 2;
}

enum Level {
    Beginner     = 0;
    Junior       = 1;
    Intermediate = 2;
    Senior       = 3;
    Expert       = 4;
    Leader       = 5;
    Professor    = 6;
    Master       = 7;
}

/*
    Has password + isDeleted + paginationId fields
    This model can only be used for the Admin
*/
message UserBase {
    string          id                = 1;
    int64           paginationId      = 2;
    optional string firstName         = 3;
    optional string lastName          = 4;
    string          username          = 5;
    string email                      = 6;
    optional string phone             = 7;
    string          password          = 8;
    Role            role              = 9;
    Level           level             = 10;
    optional string introductionBrief = 11;
    optional string image             = 12;
    bool            isDeleted         = 13;
    int32           totalCredit       = 14;
    int64           createdAt         = 15;
    int64           updatedAt         = 16;
    optional string thumbnail         = 17;
    bool            official          = 18;
    bool            is_active         = 19;
}

/*
    No password + isDeleted fields
    Filtered User model
*/
message User {
    string          id                = 1;
    int64           paginationId      = 2;
    optional string firstName         = 3;
    optional string lastName          = 4;
    string          username          = 5;
    optional string email             = 6;
    optional string phone             = 7;
    Role            role              = 8;
    Level           level             = 9;
    optional string introductionBrief = 10;
    optional string image             = 11;
    int32           totalCredit       = 12;
    int64           createdAt         = 13;
    int64           updatedAt         = 14;
    optional string thumbnail         = 15;
    bool            official          = 16;
    bool            is_active         = 17;
}

/*
    No password + isDeleted + paginationId + introduction + image fields
    since those fields are very large to query, not very efficient to search
    password and isDeleted is removed due to privacy
    Include new fields such as offset and limit to do pagination
*/
message UserQuery {
    optional int64  offset      = 1;
    optional int32  limit       = 2;

    optional string id          = 3;
    optional string firstName   = 4;
    optional string lastName    = 5;
    optional string username    = 6;
    optional string email       = 7;
    optional string phone       = 8;
    optional Role   role        = 9;
    optional Level  level       = 10;
    optional int32  totalCredit = 11;
    optional int64  createdAt   = 12;
    optional int64  updatedAt   = 13;
    optional bool official      = 14;
    optional bool is_active     = 15;
}

message SuccessfulProto{
  string res = 1;
}

message GetNumberOfUsersRoleRes {
    int64 totalSubscriber = 1;
    int64 totalModerator  = 2;
    int64 totalInstructor = 3;
    int64 totalAdmin      = 4;
}

message GetNumberOfUsersLevelRes {
    int64 totalBeginner     = 1;
    int64 totalJunior       = 2;
    int64 totalIntermediate = 3;
    int64 totalSenior       = 4;
    int64 totalExpert       = 5;
    int64 totalLeader       = 6;
    int64 totalProfessor    = 7;
    int64 totalMaster       = 8;
}

message GetNumberOfUsersProtoRes {
    int64                      totalUser       = 1;
    //GetNumberOfUsersRoleRes    totalUserRole   = 2;
    //GetNumberOfUsersLevelRes   totalUserLevel  = 3;
}

message Empty {}

message UserList {
    repeated User users = 1;
}

message GetUserByIdProtoReq {
    string id = 1;
}

message LoginUserProtoReq {
    string username = 1;
    string password = 2;
}

message LoginWalletUserProtoReq {
  string walletId = 1;
  string network = 2;
  string accountId = 3;
}

message GetUserByEmailProtoReq {
    string email = 1;
}

message CreateUserProtoReq {
    optional string username = 1;
    string email    = 2;
    string password = 3;
}
message CreateWalletUserProtoReq {
  string id = 1;
}

message UpdateUserProtoReq {
    string          id                = 1;
    optional string firstName         = 2;
    optional string lastName          = 3;
    optional string username          = 4;
    optional string email             = 5;
    optional string phone             = 6;
    optional string introductionBrief = 7;
    optional string image             = 8;
    optional string thumbnail         = 11;
    optional bool   official          = 12;
    optional bool   is_active         = 13;
}

message UpdateNewPasswordProtoReq {
    string user_id      = 1;
    string new_password = 2;
}

message DeleteUserProtoReq {
    string id       = 1;
    string password = 2;
}


message OAuthState {
    string csrfState = 1;
    string pkceCodeVerifier = 2;
}

message DeleteOAuthStateProtoReq {
    string csrfState = 1;
}

/* UserInformation */
message UserInformationBase {
    string user_id                       = 1;
    optional string job_title            = 2;
    optional string location             = 3;
    optional string company              = 4;
    optional string bio                  = 5;
    optional string job_type             = 6;
    optional int32 year_of_experience    = 7;
    optional string industry             = 8;
    optional int64 birthday              = 9;
    optional string organization         = 10;
    optional string education_level      = 11;
    optional string education            = 12;
    repeated string social_link          = 13;
    optional string major_field          = 14;
    optional string know_through         = 15;
    optional string want_to_learn        = 16;
    optional string career_path          = 17;
    bool     isDeleted                   = 18;
    int64    createdAt                   = 19;
    int64    updatedAt                   = 20;
}

message GetUserInformationProtoReq{
    string user_id  = 1;
}

message UpdateUserInformationProtoReq{
    string user_id                       = 1;
    optional string job_title            = 2;
    optional string location             = 3;
    optional string company              = 4;
    optional string bio                  = 5;
    optional string job_type             = 6;
    optional int32 year_of_experience    = 7;
    optional string industry             = 8;
    optional int64 birthday              = 9;
    optional string organization         = 10;
    optional string education_level      = 11;
    optional string education            = 12;
    repeated string social_link          = 13;
    optional string major_field          = 14;
    optional string know_through         = 15;
    optional string want_to_learn        = 16;
    optional string career_path          = 17;
}


/*Team*/
message TeamBase {
    string      id          = 1;
    int64       paginationId    = 2;
    string    name        = 3;
  string    description   = 4;
  string    owner       = 5;
    int64     createdAt     = 6;
    int64     updatedAt     = 7;
  bool    isDeleted     = 8;
    optional string logo        = 9;
}

message TeamListProtoReq {
    optional int64  offset      = 1;
    optional int64  limit       = 2;
    optional string name      = 3;
    optional string owner       = 4;
    optional int64  createdAt   = 5;
    optional int64  updatedAt   = 6;
}

message TeamListProtoRes {
    repeated TeamBase teams = 1;
}

message GetTeamByIdProtoReq {
    string id = 1;
}

message GetTeamOwnerByUserIdProtoReq {
    string user_id = 1;
}
message GetUserTeamParticipationsProtoReq{
  string user_id = 1;
}

message CreateTeamProtoReq {
  string team_id = 1;
    string  name      = 2;
    string  description	= 3;
  string  owner       = 4;
  optional string logo = 5;
}

message UpdateTeamProtoReq {
    string          id      = 1;
    optional string   name      = 2;
  optional string   description = 3;
  optional string   owner     = 4;
  optional string logo = 5;
}

message DeleteTeamProtoReq {
    string id = 1;
}

message CourseTeamBase {
    string courseId     = 1;
    string teamId       = 2;
    int64 expiredTime   = 3;
}

message CreateCourseTeamProtoReq {
    string courseId     = 1;
    string teamId       = 2;
    int64 expiredTime   = 3;
}

message GetCourseTeamProtoReq {
    string courseId             = 1;
    optional string teamId      = 2;
}

message DeleteCourseTeamProtoReq {
    string courseId     = 1;
    string teamId       = 2;
}
enum TeamRole {
    ___Owner      = 0;
    ___Admin      = 1;
    ___Moderator  = 2;
    ___Member     = 3;
}

message GetUserTeamParticipateProtoRes {
    string      id          = 1;
    int64       paginationId    = 2;
    string    name        = 3;
  string    description   = 4;
  string    owner       = 5;
    int64     createdAt     = 6;
    int64     updatedAt     = 7;
  bool    isDeleted     = 8;
    optional string logo        = 9;
    TeamRole    my_role         = 10;
    repeated User   members     = 11;
}

message GetUserTeamParticipateListProtoRes {
    repeated GetUserTeamParticipateProtoRes teams = 1;
}

message AddTeamMemberProtoReq{
  string      teamId  = 1;
  string      userId  = 2;
    TeamRole    role    = 3;
}

message GetTeamMemberProtoReq {
  string                teamId      = 1;
  optional int64        offset      = 2;
    optional int32        limit       = 3;
    optional string       id          = 4;
    optional string       firstName   = 5;
    optional string       lastName    = 6;
    optional string       username    = 7;
    optional string       email       = 8;
    optional string       phone       = 9;
    optional Role               role        = 10;
    optional Level              level       = 11;
    optional int32        totalCredit = 12;
    optional int64        createdAt   = 13;
    optional int64        updatedAt   = 14;

}

message DeleteTeamMemberProtoReq{
    string teamId = 1;
  string userId = 2;
}

// Email
enum EmailType {
    Invite       = 0;
    Notify       = 1;
}

message EmailBase {
    string      id          = 1;
    int64       paginationId    = 2;
    EmailType   email_type      = 3;
  string    subject     = 4;
    string      header          = 5;
    string      body            = 6;
    int64     createdAt     = 7;
    int64     updatedAt     = 8;
  bool    isDeleted     = 9;
}

message EmailListProtoReq {
    optional int64      offset      = 1;
    optional int64      limit       = 2;
    optional EmailType  email_type   = 3;
    optional int64      createdAt   = 4;
    optional int64      updatedAt   = 5;
}

message EmailListProtoRes {
    repeated EmailBase emails = 1;
}

message GetEmailByIdProtoReq {
    string id = 1;
}

message CreateEmailProtoReq {
    EmailType   email_type      = 1;
  string    subject     = 2;
    string      header          = 3;
    string      body            = 4;
}

message UpdateEmailProtoReq {
    string          id          = 1;
    optional EmailType  email_type      = 2;
  optional string   subject     = 3;
    optional string     header          = 4;
    optional string     body            = 5;
}

message DeleteEmailProtoReq {
    string id = 1;
}

message UpdateRoleUserProtoReq {
  string id = 1;
  Role role = 2;
}

message GetUserByWalletIdProtoReq {
  string walletId = 1;
}

message WalletUser {
  string Id   = 1;
  string walletId = 2;
  string network = 3;
}

message CollectingFeedbackBase {
    string      id                      = 1;
    string      typeOfQuestion          = 2;
    string      subject                 = 3;
    string      detail                  = 4;
    string      yourName                = 5;
    string      yourEmail               = 6;
    repeated    string attachments      = 7;
    bool        isDeleted               = 8;
    int64       createdAt               = 9;
    int64       updatedAt               = 10;
    int64       paginationId            = 11;
}

message GetCollectingFeedbackByIdProtoReq {
    string id = 1;
}

message GetCollectingFeedbackListProtoReq {
    optional string id                 = 1;
    optional string typeOfQuestion     = 2;
    optional int64 offset              = 3;
    optional int32 limit               = 4;
}

message GetCollectingFeedbackListProtoRes {
    repeated CollectingFeedbackBase feedbacks = 1;
}

message CreateCollectingFeedbackProtoReq {
    string      typeOfQuestion          = 1;
    string      subject                 = 2;
    string      detail                  = 3;
    string      yourName                = 4;
    string      yourEmail               = 5;
    repeated    string attachments      = 6;
}

message DeleteCollectingFeedbackProtoReq {
    string id = 1;
}

message UpdateEmailUserProtoReq {
  string id = 1;
  string email = 2;
}


/* tbl_Invite */
enum InvitationType {
    _Judge      = 0;
    _Team       = 1;
  _Moderator  = 2;
  _Assistant	= 3;
  _Mentor		= 4;
}
enum InvitationState {
    _Waiting      = 0;
    _Accept       = 1;
  _Reject     = 2;
}
enum InvitationFor {
  _Hackathon    = 0;
  _Organize     = 1;
  _Course       = 2;
  _BootCamp     = 3;
}

message InvitationBase {
  string      parentId    = 1;
  string      userId      = 2;
  string      inviteKey     = 3;
  string      title       = 4;
  string      message     = 5;
  InvitationFor	inviteFor     = 6;
  InvitationType  invitationType  = 7;
  InvitationState state       = 8;
  int64       deadline		= 9;
}

message GetInvitationListReq {
  optional string parentId  = 1;
  optional string userId    = 2;
}

message GetInvitationByIdReq {
  string parentId   = 1;
  string userId     = 2;
}

message GetInvitationByKeyReq {
  string inviteKey  = 1;
}

message InvitationListRes {
  repeated InvitationBase invitations = 1;
}

message CreateInvitationProtoReq {
  string      parentId    = 1;
  string      userId      = 2;
  string      title       = 3;
  string      message     = 4;
  InvitationType  invitationType  = 5;
  InvitationFor	inviteFor     = 6;
  int64       deadline		= 7;
}

message UpdateInvitationProtoReq {
  string            parentId    = 1;
  string            userId      = 2;
  optional string       title       = 3;
  optional string       message     = 4;
  optional int64        deadline		= 5;
}

message ResponseInvitationProtoReq {
  string  parentId    = 1;
  string  userId      = 2;
  InvitationState state   = 3;
}

message DeleteInvitationProtoReq {
  string  parentId    = 1;
  string  userId      = 2;
}

/*organize*/


message OrganizeBase {
  string          id                  = 1;
  string          hostId              = 2; // FK to the id field of UserProtoModel
  string          name                = 3;
  string          shortName           = 4;
  string          url                 = 5;
  optional string  logo               = 6;
  string          tagline             = 7;
  string          description         = 9;
  string          location            = 10;
  OrganizeType    organizeType        = 11;
  string          websiteOfficial     = 12;
  bool            official            = 13;
  bool            is_deleted          = 14;
  int64           createdAt           = 15;
    int64           paginationId        = 16;
}

enum OrganizeType{
  University      = 0;
  Organization    = 1;
}

message OrgListProtoReq {
    optional int64  offset      = 1;
    optional int32  limit       = 2;
}

message OrganizeList {
  repeated OrganizeBase orgs = 1;
}

message GetOrgByIdProtoReq{
  string id = 1;
}

message CreateOrgProtoReq {
  string userId = 1; // FK to the id field of UserProtoModel
  string name = 2;
  optional string shortName = 3;
  string url = 4;
  optional string logo = 5;
  optional string tagline = 6;
  optional string description = 7;
  optional string location = 8;
  optional string websiteOfficial = 9;
  OrganizeType organizeType = 10;
  bool official = 11;
}

message UpdateOrgProtoReq{
  string id = 1;
  optional string hostId = 2; // FK to the id field of UserProtoModel
  optional string name = 3;
  optional string shortName = 4;
  optional string url = 5;
  optional string logo = 6;
  optional string tagline = 7;
  optional string description = 8;
  optional string location = 9;
  optional string websiteOfficial = 10;
}

message DeleteOrgProtoReq {
  string id = 1;
}

message RemoveOrgProtoReq {
  string id = 1;
}

message RestoreOrgProtoReq {
  string id = 1;
}

message AddModeratorProtoReq{
  string parentId = 1;
  string moderatorId = 2;
}

message ViewModeratorProtoReq{
  string                parentId   = 1;
  optional int64        offset      = 2;
    optional int32        limit       = 3;
    optional string       id          = 4;
    optional string       firstName   = 5;
    optional string       lastName    = 6;
    optional string       nickname    = 7;
    optional string       email       = 8;
    optional string       phone       = 9;
    optional Role               role        = 10;
    optional Level              level       = 11;
    optional int32        totalCredit = 12;
    optional int64        createdAt   = 13;
    optional int64        updatedAt   = 14;

}

message SendEmailForUserProtoReq{
    string user_id  = 1;
    string email    = 2;
}

message NumberOfUser{
  int64 total = 1;
}


// User Affiliate

message UserAffiliateProtoModel {
    string user_id                  = 1;
    string referral_code            = 2;
    optional string referred_by     = 3;
    int64 points                    = 4;
    int64 referral_l1               = 5;
    int64 referral_l2               = 6;
    int64 referral_l3               = 7;
    bool is_referred                = 8;
    bool is_deleted                 = 9;
    int64  paginationId             = 10;
    int64  createdAt                = 11;
    int64  updatedAt                = 12;
    int64 commission                = 13;
}

message UserReferralDetailProtoRes {
    string user_id              = 1;
    string username             = 2;
    optional string firstName   = 3;
    optional string lastName    = 4;
    int64  points               = 5;
    int64 referral_l1           = 6;
    int64 referral_l2           = 7;
    int64 referral_l3           = 8;
    bool is_active              = 9;
}

message GetUserAffiliateProtoReq {
    string id_or_code      = 1;
}

message GetCommissionUserAffiliateProtoReq {
    string id_or_code      = 1;
}

message GetCommissionUserAffiliateProtoRes {
    int64 points     = 1;
}


message GetUserReferralOfUserProtoReq {
    string id_or_code           = 1;
    optional int64 offset        = 2;
    optional int64 limit         = 3;
}

message GetUserReferralOfUserProtoRes {
    repeated UserReferralDetailProtoRes refs = 1;
}

message GetTopUserReferralProtoReq {
    optional int64 offset        = 1;
    optional int64 limit         = 2;
}

message GetTopUserReferralProtoRes {
    repeated UserReferralDetailProtoRes users = 1;
}

message CreateUserAffiliateProtoReq {
    string user_id                  = 1;
    bool is_referred                = 2;
    optional string referred_code   = 3;
}

message UpdateCommissionUserAffiliateProtoReq {
    string user_id       = 1;
    int64 commission     = 2;
}

message UpdateUserAffiliateProtoReq {
    string user_id                  = 1;
    optional string referred_code   = 2;
    optional int64 points           = 3;
    optional int64 referral_l1      = 4;
    optional int64 referral_l2      = 5;
    optional int64 referral_l3      = 6;
    optional bool is_referred       = 7;
}


enum PaymentType {
  Crypto = 0;
  Fiat = 1;
}

message PaymentInfoProtoModel {
  string paymentId = 1;
  string userId = 2;
  PaymentType paymentType = 3;
  string title = 4;
  string network = 5;
  string qrCode = 6;
  string address = 7;
  string notes = 8;
  bool   isAdmin = 9;
  string accountName = 10;
  int64 createdAt = 11;
  int64 updatedAt = 12;
}

message CreatePaymentInfoProtoReq {
  string userId = 1;
  PaymentType paymentType = 2;
  string title = 3;
  string network = 4;
  string qrCode = 5;
  string address = 6;
  optional string notes = 7;
  bool is_admin = 8;
  string accountName = 9;
}

message PaymentInfoQuery {
    optional int64  offset      = 1;
    optional int32  limit       = 2;
    optional string userId      = 3;
    optional PaymentType paymentType = 4;
    optional string title       = 5;
    optional string network     = 6;
    optional string qrCode      = 7;
    optional string address     = 8;
    optional string notes       = 9;
    optional string accountName = 10;
    optional int64  createdAt   = 11;
    optional int64  updatedAt   = 12;
}

message GetPaymentInfoIdProtoReq{
  string paymentId = 1;
}

message DeletePaymentInfoProtoReq{
  string paymentId = 1;
}

message UpdatePaymentInfoProtoReq {
  string paymentId = 1;
  optional string userId = 2;
  optional PaymentType paymentType = 3;
  optional string title = 4;
  optional string network = 5;
  optional string qrCode = 6;
  optional string address = 7;
  optional string notes = 8;
}

message ListPaymentInfo {
  repeated PaymentInfoProtoModel payments = 1;
}

// Followers and Following
message UserFollowsProtoModel {
    string follower_id      = 1;
    string followed_id      = 2;
    bool is_deleted         = 3;
    int64  createdAt        = 4;
    int64  updatedAt        = 5;
}

message GetFollowersOfUserProtoReq {
    string user_id   = 1;
}

message GetFollowingOfUserProtoReq {
    string user_id   = 1;
}


message GetNumberFollowerAndFollowingOfUserProtoReq {
    string user_id   = 1;
}

message GetNumberFollowerAndFollowingOfUserProtoRes {
    string user_id    = 1;
    int64 followers   = 2;
    int64 following   = 3;
}

message CreateUserFollowsProtoReq {
    string follower_id      = 1;
    string followed_id      = 2;
}

message RestoreUserFollowsProtoReq {
    string follower_id      = 1;
    string followed_id      = 2;
}

message DeleteUserFollowsProtoReq {
    string follower_id      = 1;
    string followed_id      = 2;
}
enum NotePriority {
  Low = 0;
  Normal = 1;
  High = 2;
}

message NoteProtoModel {
  string note_id = 1;
  string course_id = 2;
  string section_id = 3;
  string lesson_id = 4;
  string user_id = 5;
  string collection_id = 6;
  string title = 7;
  string content = 8 ;
  NotePriority priority = 9 ;
  int64 created_at = 10;
  int64 updated_at = 11;
  int64 timeInVideo = 12;
}

message CreateNoteProtoReq {
  string course_id = 2;
  string section_id = 3;
  string lesson_id = 4;
  string user_id = 5;
  optional string collection_id = 6;
  string title = 7;
  string content = 8 ;
  optional NotePriority priority = 9 ;
  int64 timeInVideo = 10;
}

message AddNoteToCollectionProtoReq {
  string note_id = 1;
  string collection_id = 2;
}

message UpdateNoteProtoReq {
  string note_id               = 1;
  optional string collection_id = 2;
  optional string title = 3;
  optional string content = 4 ;
  optional NotePriority priority = 5;
}

message GetNotesProtoReq {
  string user_id = 5;
  optional string note_id = 1;
  optional string course_id = 2;
  optional string section_id = 3;
  optional string lesson_id = 4;
  optional string collection_id = 6;
  optional string title = 7;
  optional NotePriority priority = 9 ;
  optional int64 created_at = 10;
  optional int64 updated_at = 11;
  optional int64        offset      = 12;
  optional int32        limit       = 13;

}

message NotesProtoList {
  repeated NoteProtoModel notes = 1;
}


message GetNoteByIdProtoReq {
  string note_id = 1;
}

message DeleteNoteProtoReq {
  string note_id = 1;
}


message NoteCollectionProtoModel {
  string collection_id = 1;
  string user_id = 2;
  string title = 3;
  string description = 4;
  int64 created_at = 6;
  int64 updated_at = 7;
}

message NoteCollectionListProto {
  repeated NoteCollectionProtoModel note_collections = 1;
}

message CreateCollectionProtoReq {
  string user_id = 2;
  string title = 3;
  string description = 4;
}

message UpdateCollectionProtoReq {
 string        collection_id = 1;
 optional string title = 2;
 optional string description = 3;

}

message GetCollectionByIdProtoReq {
  string collection_id = 1;
}

message GetCollectionsProtoReq {
  string user_id = 2;
  optional string title = 3;
  optional int64 created_at = 6;
  optional int64 updated_at = 7;
  optional int64        offset      = 8;
  optional int32        limit       = 9;

}
message DeleteCollectionProtoReq {
  string collection_id = 1;
}

message GetAdminPaymentInfoProtoReq {
  PaymentType payment_type = 1;
}


message UpdateDesktopSessionProtoReq {
  string user_id = 1;
  string session_id = 2;
}
message UpdateMobileSessionProtoReq {
  string user_id = 1;
  string session_id = 2;
}
message GetUserByDesktopSessionProtoReq{
  string session_id = 1;
}
message GetUserByMobileSessionProtoReq{
  string session_id = 1;
}
message DeleteDesktopSessionProtoReq{
  string user_id = 1;
}
message DeleteMobileSessionProtoReq{
  string user_id = 1;
}

// User Ranking
message UserRankingProtoRes {
    int64                                       top     = 1;
    User                                        user = 2;
    GetNumberFollowerAndFollowingOfUserProtoRes follows = 3;
}

message TopUserRankingProtoRes {
    repeated UserRankingProtoRes tops =  1;
}
message GetTopUserRankingProtoReq {
    optional int64      top         = 1;
    //optional int64      offset      = 2;
    //optional int64      limit       = 3;
}

message GetMyRankingProtoReq {
    string      user_id         = 1;
}

message AddPlatformPartnerProto {
  string partner_id = 1;
  PlatformPartnerRole platform_partner_role = 2;
  string description = 3;
}

enum UserPartnerInvitationState {
	Pending = 0;
	Accepted = 1;
	Rejected = 2;
}

message GetPartnerByUserProtoReq {
  string user_id = 2;
  optional UserPartnerInvitationState state  = 3;
}

message AddPartnerToUserProtoReq {
  string user_id = 1;
  string partner_id = 2;
}

message DeletePartnerFromUserProtoReq {
  string user_id = 1;
  string partner_id = 2;
}

message UpdatePartnerToUserProtoReq {
  string user_id = 1;
  string partner_id = 2;
  UserPartnerInvitationState state  = 3;
}


service UserServiceProtocol {
  // Session
  rpc UpdateDesktopSessionCall(UpdateDesktopSessionProtoReq) returns (User);
  rpc UpdateMobileSessionCall(UpdateMobileSessionProtoReq) returns (User);
  rpc GetUserByDesktopSessionCall(GetUserByDesktopSessionProtoReq) returns (User);
  rpc GetUserByMobileSessionCall(GetUserByMobileSessionProtoReq) returns (User);
  rpc DeleteDesktopSessionCall(DeleteDesktopSessionProtoReq) returns (Empty);
  rpc DeleteMobileSessionCall(DeleteMobileSessionProtoReq) returns (Empty);
  // Payment
  rpc GetPaymentInfoListCall(PaymentInfoQuery)         returns (ListPaymentInfo);
  rpc UpdatePaymentInfoCall(UpdatePaymentInfoProtoReq) returns (PaymentInfoProtoModel);
  rpc GetPaymentInfoByIdCall(GetPaymentInfoIdProtoReq) returns (PaymentInfoProtoModel);
  rpc DeletePaymentInfoCall(DeletePaymentInfoProtoReq) returns (Empty);
  rpc CreatePaymentInfoCall(CreatePaymentInfoProtoReq) returns (PaymentInfoProtoModel);
  rpc GetAdminPaymentInfoCall(GetAdminPaymentInfoProtoReq)  returns (ListPaymentInfo);

    // Normal user calls

  rpc GetUsersCall(UserQuery)                   returns (UserList);
  rpc GetUserByIdCall(GetUserByIdProtoReq)      returns (User);
  rpc GetUserByLoginInfoCall(LoginUserProtoReq) returns (User);
  rpc CreateUserCall(CreateUserProtoReq)        returns (User);
  rpc UpdateUserCall(UpdateUserProtoReq)        returns (User);
  rpc DeleteUserCall(DeleteUserProtoReq)        returns (Empty);
  rpc CreateUserWalletLoginCall(LoginWalletUserProtoReq)    returns (WalletUser);
  rpc GetUserByWalletIdCall(GetUserByWalletIdProtoReq) returns(WalletUser);
  rpc GetWalletUserByIdCall(GetUserByIdProtoReq) returns(WalletUser);
  rpc CreateUserWalletCall(CreateWalletUserProtoReq)        returns (User);
  rpc UpdateEmailUserCall(UpdateEmailUserProtoReq) returns (User);
  rpc SendEmailForUserCall(SendEmailForUserProtoReq) returns (Empty);
  rpc UpdateNewPasswordCall(UpdateNewPasswordProtoReq) returns (Empty);

  rpc GetNumberOfUsersCall(Empty) returns (GetNumberOfUsersProtoRes);

    // For google login
  rpc CreateOAuthStateCall(OAuthState)               returns (OAuthState);
  rpc GetUserByEmail(GetUserByEmailProtoReq)         returns (User);
  rpc DeleteOAuthStateCall(DeleteOAuthStateProtoReq) returns (OAuthState);

    // Admin user calls

    // This command overrides a certain user by id, however it doesn't change the user id
  rpc OverrideUserCall(UserBase)               returns (UserBase);
  rpc AdminDeleteUserCall(GetUserByIdProtoReq) returns (Empty);
  rpc RestoreUserCall(GetUserByIdProtoReq) returns (Empty);

  // User Information
  //rpc CreateUserInformationCall(CreateUserInformationProtoReq)   returns (UserInformationBase);
  rpc GetUserInformationCall(GetUserInformationProtoReq)         returns (UserInformationBase);
  rpc UpdateUserInformationCall(UpdateUserInformationProtoReq)   returns (UserInformationBase);

  // For team
  rpc GetTeamsCall(TeamListProtoReq)                      returns (TeamListProtoRes);
  rpc GetTeamByIdCall(GetTeamByIdProtoReq)                returns (TeamBase);
  rpc CreateTeamCall(CreateTeamProtoReq)                  returns (TeamBase);
  rpc UpdateTeamCall(UpdateTeamProtoReq)                  returns (TeamBase);
  rpc DeleteTeamCall(DeleteTeamProtoReq)                  returns (Empty);

  rpc GetCourseTeamCall(GetCourseTeamProtoReq)                returns (TeamListProtoRes);
  rpc CreateCourseTeamCall(CreateCourseTeamProtoReq)          returns (CourseTeamBase);
  rpc DeleteCourseTeamCall(DeleteCourseTeamProtoReq)          returns (Empty);

  rpc AddTeamMemberCall(AddTeamMemberProtoReq)            returns (Empty);
  rpc GetTeamMemberCall(GetTeamMemberProtoReq)            returns (UserList);
  rpc DeleteTeamMemberCall(DeleteTeamMemberProtoReq)      returns (Empty);
  rpc RemoveTeamMemberCall(DeleteTeamMemberProtoReq)      returns (Empty);
  rpc RestoreTeamMemberCall(DeleteTeamMemberProtoReq)     returns (Empty);
  rpc GetTeamOwnerByUserIdCall(GetTeamOwnerByUserIdProtoReq)     returns (TeamListProtoRes);
  rpc GetUserTeamParticipationsCall(GetUserTeamParticipationsProtoReq)     returns (GetUserTeamParticipateListProtoRes);

    // Email
  rpc GetEmailsCall(EmailListProtoReq)                      returns (EmailListProtoRes);
  rpc GetEmailByIdCall(GetEmailByIdProtoReq)                returns (EmailBase);
  rpc CreateEmailCall(CreateEmailProtoReq)                  returns (EmailBase);
  rpc UpdateEmailCall(UpdateEmailProtoReq)                  returns (EmailBase);
  rpc DeleteEmailCall(DeleteEmailProtoReq)                  returns (Empty);

  rpc UpdateRoleUserCall(UpdateRoleUserProtoReq)            returns (User);


    // CollectingFeedback
  rpc GetCollectingFeedbackByIdCall(GetCollectingFeedbackByIdProtoReq)    returns (CollectingFeedbackBase);
  rpc GetCollectingFeedbackListCall(GetCollectingFeedbackListProtoReq)    returns (GetCollectingFeedbackListProtoRes);
  rpc CreateCollectingFeedbackCall(CreateCollectingFeedbackProtoReq)      returns (CollectingFeedbackBase);
  rpc DeleteCollectingFeedbackCall(DeleteCollectingFeedbackProtoReq)      returns(Empty);

    // Invitation
  rpc GetInvitationsCall(GetInvitationListReq) returns (InvitationListRes);
  rpc GetInvitationByIdCall(GetInvitationByIdReq) returns (InvitationBase);
  rpc GetInvitationByKeyCall(GetInvitationByKeyReq) returns (InvitationBase);
  rpc CreateInvitationCall(CreateInvitationProtoReq) returns (InvitationBase);
  rpc UpdateInvitationCall(UpdateInvitationProtoReq) returns (InvitationBase);
  rpc ResponseInvitationCall(ResponseInvitationProtoReq) returns (InvitationBase);
  rpc DeleteInvitationCall(DeleteInvitationProtoReq) returns (Empty);

    // Organize
  rpc GetOrgsCall(OrgListProtoReq)     returns (OrganizeList);
  rpc GetOrgByIdCall(GetOrgByIdProtoReq) returns (OrganizeBase);
  rpc CreateOrgCall(CreateOrgProtoReq)   returns (OrganizeBase);
  rpc UpdateOrgCall(UpdateOrgProtoReq)   returns (OrganizeBase);
  rpc DeleteOrgCall(DeleteOrgProtoReq)   returns (Empty);
  rpc RemoveOrgCall(RemoveOrgProtoReq)   returns (Empty);
  rpc RestoreOrgCall(RestoreOrgProtoReq) returns (Empty);
  rpc AddModeratorCall(AddModeratorProtoReq) returns (Empty);
  rpc ViewModeratorCall(ViewModeratorProtoReq) returns (UserList);

    // User Affiliate
  rpc GetUserAffiliateCall(GetUserAffiliateProtoReq) returns(UserAffiliateProtoModel);
  rpc GetUserReferralOfUserCall(GetUserReferralOfUserProtoReq) returns(GetUserReferralOfUserProtoRes);
  rpc GetTopUserReferralCall(GetTopUserReferralProtoReq) returns(GetTopUserReferralProtoRes);
  rpc CreateUserAffiliateCall(CreateUserAffiliateProtoReq) returns(UserAffiliateProtoModel);
  rpc UpdateUserAffiliateCall(UpdateUserAffiliateProtoReq) returns(UserAffiliateProtoModel);
  rpc UpdateCommissionUserAffiliateCall(UpdateCommissionUserAffiliateProtoReq) returns(UserAffiliateProtoModel);

    // Followers and Following
  rpc GetFollowersOfUserCall(GetFollowersOfUserProtoReq) returns(UserList);
  rpc GetFollowingOfUserCall(GetFollowingOfUserProtoReq) returns(UserList);
  rpc GetNumberFollowerAndFollowingOfUserCall(GetNumberFollowerAndFollowingOfUserProtoReq) returns(GetNumberFollowerAndFollowingOfUserProtoRes);
  rpc CreateUserFollowsCall(CreateUserFollowsProtoReq) returns(UserFollowsProtoModel);
  rpc DeleteUserFollowsCall(DeleteUserFollowsProtoReq) returns(Empty);
  rpc RestoreUserFollowsCall(RestoreUserFollowsProtoReq) returns(Empty);
  rpc GetPopularInstructorCall(Empty) returns(UserList);

  // Note
  rpc GetNoteByIdCall(GetNoteByIdProtoReq) returns (NoteProtoModel);
  rpc GetListNoteCall(GetNotesProtoReq) returns (NotesProtoList);
  rpc CreateNoteProtoCall(CreateNoteProtoReq) returns (NoteProtoModel);
  rpc UpdateNoteProtoCall(UpdateNoteProtoReq) returns (NoteProtoModel);
  rpc DeleteNoteProtoCall(DeleteNoteProtoReq) returns (Empty);
  rpc AddNoteToCollectionCall(AddNoteToCollectionProtoReq) returns (NoteProtoModel);
  // Collection
  rpc GetCollectionByIdCall(GetCollectionByIdProtoReq) returns (NoteCollectionProtoModel);
  rpc GetCollectionsCall(GetCollectionsProtoReq) returns (NoteCollectionListProto);
  rpc CreateCollectionCall(CreateCollectionProtoReq) returns (NoteCollectionProtoModel);
  rpc UpdateCollectionCall(UpdateCollectionProtoReq) returns (NoteCollectionProtoModel);
  rpc DeleteCollectionCall(DeleteCollectionProtoReq) returns (Empty);

    // Ranking
  rpc GetTopUserRankingCall(GetTopUserRankingProtoReq) returns (TopUserRankingProtoRes);
  rpc GetMyRankingCall(GetMyRankingProtoReq) returns (UserRankingProtoRes);

  // add platform partner
  rpc AddPlatformPartnerCall(AddPlatformPartnerProto) returns(SuccessfulProto);
  rpc GetPlatformPartnerCall(Empty) returns(UserList);
  // Course Partner 
  rpc GetPartnerByUserCall(GetPartnerByUserProtoReq) returns(UserList);
  rpc GetInvitationPartnerCall(GetPartnerByUserProtoReq) returns(UserList);
  rpc AddPartnerToUserCall(AddPartnerToUserProtoReq) returns(Empty);
  rpc DeletePartnerFromUserCall(DeletePartnerFromUserProtoReq) returns(Empty);
  rpc UpdatePartnerToUserCall(UpdatePartnerToUserProtoReq) returns(Empty);
}
