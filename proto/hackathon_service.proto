syntax = "proto3";

package hackathon_service;

import "user_service.proto";

/*paginate*/
message PaginateProtoModel{
    uint32 total 	 = 1;
    uint32 page 	 = 2;
    uint32 pageSize  = 3;
    uint32 totalPage = 4;
}

message PaginateProtoReq {
    optional uint32 page 	 = 1;
    optional uint32 pageSize = 2;
}

/*hackthon*/

enum HackathonType {
    Online     = 0;
    Offline     = 1;
    Hybrid 	   = 2;
	BootCamp   = 3;
}

enum HackathonState {
	Pending 	= 0;
	Started 	= 1;
	Submitted	= 2;
	Ended		= 3;
}

message HackathonBase {
    string 			id 		  		= 1;
    string 			name 	   		= 2;
	string 			owner 	   		= 3;
	int64  			feeToJoin 		= 4;
	HackathonType	hackathonType 	= 5;
	string 			url 			= 6;
	string 			logo 			= 7;
	string 			tagline 		= 8;
	repeated string hackathonTag 	= 9;
	string 			contactEmail 	= 10;
	string 			thumbnail  		= 11;
	bool 			isPublic 		= 12;
	string 			description 	= 13;
	string 			rules 			= 14;
	string 			resource 		= 15;
	bool   			reorganizes 	= 16; 
	HackathonState 	state 			= 17;
	int64 			maximumQuantity = 18;
    int64  			createdAt   	= 19;
    int64  			updatedAt   	= 20;
    int64  			startAt 	   	= 21;
    int64  			dueAt 	   		= 22;
	string 			organizeId 		= 23;
	bool 			is_deleted 		= 24;
}

message HackathonListProtoReq {
    PaginateProtoReq paginate = 1;
    optional string  name 	  = 2;
}

message HackathonListProtoRes {
    repeated HackathonBase hackathons = 1;
    PaginateProtoModel     paginate   = 2; 
}

message GetHackathonByIdProtoReq {
    string id = 1;
}


message CreateHackathonProtoReq {
    string 	name 	   	= 1;
    int64 	feeToJoin	= 2;
	string 	organizeId 	= 3;
}

message ReCreateHackathonProtoReq {
	string 				id 			= 1;
    optional string 	name 	   	= 2;
	optional int64 		feeToJoin	= 3;
}

message UpdateHackathonProtoReq {
    string 						id 			 	= 1;
    optional string 			name 	   		= 2;
	optional string 			owner 	   		= 3;
	optional int64  			feeToJoin 		= 4;
	optional HackathonType		hackathonType 	= 5;
	optional string 			url 			= 6;
	optional string 			logo 			= 7;
	optional string 			tagline 		= 8;
	repeated string 			hackathonTag 	= 9;
	optional string 			contactEmail 	= 10;
	optional string 			thumbnail  		= 11;
	optional bool 				isPublic 		= 12;
	optional string 			description 	= 13;
	optional string 			rules 			= 14;
	optional string 			resource 		= 15;
	optional bool   			reorganizes 	= 16; 
	optional HackathonState 	state 			= 17;
	optional int64 				maximumQuantity = 18;
    optional int64  			startAt 	   	= 19;
    optional int64  			dueAt 	   		= 20;
}

message DeleteHackathonProtoReq {
    string id = 1;
}

/* tblHackathonTags */
message HackathonTagBase {
	string id 			= 1;
	string tagName 		= 2;
	string description 	= 3;
}

message HackathonTagListRes {
	repeated HackathonTagBase hackathonTags = 1;
}

message GetHackathonTagByIdReq {
	string id = 1;
}

message GetHackathonTagListReq {
	optional string tagName = 1;
}


message UpdateHackathonTagProtoReq {
	string id 						= 1;
	optional string tagName 		= 2;
	optional string description 	= 3;
}

message DeleteHackathonTagProtoReq {
	string id = 1;
}


message CreateHackathonTagProtoReq {
	string tagName = 1;
	string description = 2;
}

/* tblMails */
message MailBase {
	string 	hackathonId 	= 1;
	int64 	timeSetting 	= 2;
	string 	subject 		= 3;
	string	content 		= 4;
	bool	isSend 			= 5;
}

message GetMailByIdReq {
	string 	hackathonId 	= 1;
}

message CreateMailProtoReq {
	string 	hackathonId 	= 1;
	int64 	timeSetting 	= 2;
	string 	subject 		= 3;
	string	content 		= 4;
	bool	isSend 			= 5;
}

message UpdateMailProtoReq {
	string 				hackathonId 	= 1;
	optional int64 		timeSetting 	= 2;
	optional string 	subject 		= 3;
	optional string		content 		= 4;
	optional bool		isSend 			= 5; 
}

message DeleteMailProtoReq {
	string hackathonId = 1;
}

/* tblRequirement */

message RequirementBase {
	string 						hackathonId 		= 1;
	repeated string 			inviteOnly 			= 2;
	repeated string 			occupationId 		= 3;
	repeated user_service.Level level 				= 4;
	int64 						teamMemberLimit 	= 5;
	int64 						minimumTeamSize 	= 6;
	repeated int64				countries			= 7;
	repeated int64 				excluded_countries 	= 8;

}

message GetRequirementProtoReq {
	string hackathonId = 1;
}

message CreateRequirementProtoReq {
	string 						hackathonId 		= 1;
	repeated string 			inviteOnly 			= 2;
	repeated string 			occupationId 		= 3;
	repeated user_service.Level level 				= 4;
	int64 						teamMemberLimit 	= 5;
	int64 						minimumTeamSize 	= 6;
	repeated int64				countries			= 7;
	repeated int64 				excluded_countries 	= 8;
}

message UpdateRequirementProtoReq {
	string 						hackathonId 		= 1;
	repeated string 			inviteOnly 			= 2;
	repeated string 			occupationId 		= 3;
	repeated user_service.Level level 				= 4;
	optional int64 				teamMemberLimit 	= 5;
	optional int64 				minimumTeamSize 	= 6;
	repeated int64				countries			= 7;
	repeated int64 				excluded_countries 	= 8;
}

message DeleteRequirementProtoReq {
	string hackathonId = 1;
}

/* tblTrack */

message TrackBase {
	string 	trackId 		= 1;
	string 	hackathonId 	= 2;
	string 	sponsor 		= 3;
	string 	title 			= 4;
	string 	description		= 5;
	string 	material 		= 6;
	string 	url 			= 7;
	string	certificate		= 8;
}

message GetTrackListReq {
	optional string hackathonId = 1;
}

message GetTrackByIdReq {
	string trackId = 1;
}

message TrackListRes {
	repeated TrackBase tracks = 1;
}

message CreateTrackProtoReq {
	string 	hackathonId 	= 1;
	string 	sponsor 		= 2;
	string 	title 			= 3;
	string 	description		= 4;
	string 	material 		= 5;
	string 	url 			= 6;
	string	certificate		= 7;
}

message UpdateTrackProtoReq {
	string 				trackId 		= 1;
	optional string 	hackathonId 	= 2;
	optional string 	sponsor 		= 3;
	optional string 	title 			= 4;
	optional string 	description		= 5;
	optional string 	material 		= 6;
	optional string 	url 			= 7;
	optional string		certificate		= 8;
}

message DeleteTrackProtoReq {
	string 	trackId 		= 1;
}

/* tbl_Invite */
enum InvitationType {
    Judge    	= 0;
    Team     	= 1;
	Moderator 	= 2;
}
enum InvitationState {
    Waiting    	= 0;
    Accept     	= 1;
	Reject 		= 2;
}

message InvitationBase {
	string 			parentId 		= 1;
	string 			userId 			= 2;
	string 			title 			= 3;
	string 			message 		= 4;			
	InvitationType 	invitationType 	= 5;
	InvitationState state 			= 6;
}

message GetInvitationListReq {
	optional string parentId 	= 1;   
	optional string userId 		= 2;
}

message InvitationListRes {
	repeated InvitationBase invitations = 1;
}

message CreateInvitationProtoReq {
	string 			parentId 		= 1;
	string 			userId 			= 2;
	string 			title 			= 3;
	string 			message 		= 4;			
	InvitationType 	invitationType 	= 5;
}

message UpdateInvitationProtoReq {
	string 						parentId 		= 1;
	string 						userId 			= 2;
	optional string 			title 			= 3;
	optional string 			message 		= 4;			
}

message ResponseInvitationProtoReq {
	string 	parentId 		= 1;
	string 	userId 			= 2;
	InvitationState state 	= 3;
}

message DeleteInvitationProtoReq {
	string 	parentId 		= 1;
	string 	userId 			= 2;
}

/* tblJudge */

message JudgeBase {
	string 	hackathonId = 1;
	string 	userId 		= 2;
	string 	title 		= 3;
	string 	photo		= 4;
	string 	profile 	= 5;
	string 	organize 	= 6;
}

message GetJudgeListReq {
	string hackathonId = 1;
	optional string userId = 2;
}


message JudgeListRes {
	repeated JudgeBase judges = 1;
}

message CreateJudgeProtoReq {
	string 	hackathonId = 1;
	string 	userId 		= 2;
}

message UpdateJudgeProtoReq {
	string 				hackathonId = 1;
	string 				userId 		= 2;
	optional string 	title 		= 3;
	optional string 	photo 		= 4;
	optional string 	profile		= 5;
	optional string 	organize 	= 6;

}

message DeleteJudgeProtoReq {
	string 				hackathonId = 1;
	string 				userId 		= 2;
}


/*organize*/


message OrganizeBase {
	string id = 1;
	string hostId = 2; // FK to the id field of UserProtoModel
	string name = 3;
	string shortName = 4;
	string url = 5;
	string logo = 6;
	string tagline = 7;
	string description = 9;
	string location = 10;
	OrganizeType organizeType = 11;
	string websiteOfficial = 12;
	bool official = 13;
	bool isDel = 14;
	int64 createdAt = 15;
}

enum OrganizeType{
	University = 0;
	Organization = 1;
}

message OrgListProtoReq {
    PaginateProtoReq paginate = 1;
}

message OrganizeList {
	repeated OrganizeBase orgs = 1;
    PaginateProtoModel paginate = 2; 
}

message GetOrgByIdProtoReq{
	string id = 1;
}

message CreateOrgProtoReq {
	string hostId = 1; // FK to the id field of UserProtoModel
	string name = 2;
	optional string shortName = 3;
	string url = 4;
	optional string logo = 5;
	optional string tagline = 6;
	optional string description = 7;
	optional string location = 8;
	optional string websiteOfficial = 9;
	OrganizeType organizeType = 10;
	bool official = 11;
	int64 createdAt = 12;
}

message UpdateOrgProtoReq{
	string id = 1;
	optional string hostId = 2; // FK to the id field of UserProtoModel
	optional string name = 3;
	optional string shortName = 4;
	optional string url = 5;
	optional string logo = 6;
	optional string tagline = 7;
	optional string description = 8;
	optional string location = 9;
	optional string websiteOfficial = 10;
}

message DeleteOrgProtoReq {
	string id = 1;
}

message RemoveOrgProtoReq {
	string id = 1;
}

message RestoreOrgProtoReq {
	string id = 1;
}

message AddModeratorProtoReq{
	string parentId = 1;
	string moderatorId = 2;
} 

message ViewModeratorProtoReq{
	string          			parentId   = 1;
	optional int64  			offset      = 2;
    optional int32  			limit       = 3;
    optional string 			id          = 4;
    optional string 			firstName   = 5;
    optional string 			lastName    = 6;
    optional string 			nickname    = 7;
    optional string 			email       = 8;
    optional user_service.Role  role        = 9;
    optional user_service.Level level       = 10;
    optional int32  			totalCredit = 11;
    optional int64  			createdAt   = 12;
    optional int64  			updatedAt   = 13;

}

message Empty {}



service HackathonServiceProtocol {
    rpc GetHackathonCall(HackathonListProtoReq) 	   returns (HackathonListProtoRes);
    rpc GetHackathonByIdCall(GetHackathonByIdProtoReq) returns (HackathonBase);
    rpc CreateHackathonCall(CreateHackathonProtoReq)   returns (HackathonBase);
	rpc ReCreateHackathonCall(ReCreateHackathonProtoReq) returns (HackathonBase);
    rpc UpdateHackathonCall(UpdateHackathonProtoReq)   returns (HackathonBase);
    rpc DeleteHackathonCall(DeleteHackathonProtoReq)   returns (Empty);
	rpc RemoveHackathonCall(DeleteHackathonProtoReq)   returns (Empty);
	rpc RestoreHackathonCall(DeleteHackathonProtoReq)   returns (Empty);
	rpc AddModeratorHackathonCall(AddModeratorProtoReq) returns (Empty);
	rpc ViewModeratorHackathonCall(ViewModeratorProtoReq) returns (user_service.UserList);

	// Hackathon_tag
	rpc GetHackathonTagsCall(GetHackathonTagListReq) returns (HackathonTagListRes);
	rpc GetHackathonTagByIdCall(GetHackathonTagByIdReq) returns (HackathonTagBase);
	rpc CreateHackathonTagCall(CreateHackathonTagProtoReq) returns (HackathonTagBase);
	rpc UpdateHackathonTagCall(UpdateHackathonTagProtoReq) returns (HackathonTagBase);
	rpc DeleteHackathonTagCall(DeleteHackathonTagProtoReq) returns (Empty);

	// Hackathon_mail
	rpc GetMailByIdCall(GetMailByIdReq) returns (MailBase);
	rpc CreateMailCall(CreateMailProtoReq) returns (MailBase);
	rpc UpdateMailCall(UpdateMailProtoReq) returns (MailBase);
	rpc DeleteMailCall(DeleteMailProtoReq) returns (Empty);

	// Hackathon_requirement
	rpc GetRequirementByIdCall(GetRequirementProtoReq) returns (RequirementBase);
	rpc CreateRequirementCall(CreateRequirementProtoReq) returns (RequirementBase);
	rpc UpdateRequirementCall(UpdateRequirementProtoReq) returns (RequirementBase);
	rpc DeleteRequirementCall(DeleteRequirementProtoReq) returns (Empty);

	// Hackathon_Track
	rpc GetTracksCall(GetTrackListReq) returns (TrackListRes);
	rpc GetTrackByIdCall(GetTrackByIdReq) returns (TrackBase);
	rpc CreateTrackCall(CreateTrackProtoReq) returns (TrackBase);
	rpc UpdateTrackCall(UpdateTrackProtoReq) returns (TrackBase);
	rpc DeleteTrackCall(DeleteTrackProtoReq) returns (Empty);

	// Invitation
	rpc GetInvitationsCall(GetInvitationListReq) returns (InvitationListRes);
	rpc CreateInvitationCall(CreateInvitationProtoReq) returns (InvitationBase);
	rpc UpdateInvitationCall(UpdateInvitationProtoReq) returns (InvitationBase);
	rpc ResponseInvitationCall(ResponseInvitationProtoReq) returns (InvitationBase);
	rpc DeleteInvitationCall(DeleteInvitationProtoReq) returns (Empty);

	// Judge
	rpc GetJudgesCall(GetJudgeListReq) returns (JudgeListRes);
	rpc CreateJudgeCall(CreateJudgeProtoReq) returns (JudgeBase);
	rpc UpdateJudgeCall(UpdateJudgeProtoReq) returns (JudgeBase);
	rpc DeleteJudgeCall(DeleteJudgeProtoReq) returns (Empty);

	// Organize
	rpc GetOrgsCall(OrgListProtoReq) 	   returns (OrganizeList);
	rpc GetOrgByIdCall(GetOrgByIdProtoReq) returns (OrganizeBase);
	rpc CreateOrgCall(CreateOrgProtoReq)   returns (OrganizeBase);
	rpc UpdateOrgCall(UpdateOrgProtoReq)   returns (OrganizeBase);
	rpc DeleteOrgCall(DeleteOrgProtoReq)   returns (Empty);
	rpc RemoveOrgCall(RemoveOrgProtoReq)   returns (Empty);
	rpc RestoreOrgCall(RestoreOrgProtoReq) returns (Empty);
	rpc AddModeratorCall(AddModeratorProtoReq) returns (Empty);
	rpc ViewModeratorCall(ViewModeratorProtoReq) returns (user_service.UserList);
}
