syntax = "proto3";

package hackathon_service;

import "user_service.proto";

/*paginate*/
message PaginateProtoModel{
    uint32 total 	 = 1;
    uint32 page 	 = 2;
    uint32 pageSize  = 3;
    uint32 totalPage = 4;
}

message PaginateProtoReq {
    optional uint32 page 	 = 1;
    optional uint32 pageSize = 2;
}

/*hackthon*/

enum HackathonType {
    Online     = 0;
    Offline     = 1;
    Hybrid 	   = 2;
	BootCamp   = 3;
}

enum HackathonState {
	Pending 	= 0;
	Started 	= 1;
	Submitted	= 2;
	Ended		= 3;
}

message HackathonBase {
    string 			id 		  		= 1;
    string 			name 	   		= 2;
	string 			owner 	   		= 3;
	int64  			feeToJoin 		= 4;
	HackathonType	hackathonType 	= 5;
	string 			url 			= 6;
	string 			logo 			= 7;
	string 			tagline 		= 8;
	repeated string hackathonTag 	= 9;
	string 			contactEmail 	= 10;
	string 			thumbnail  		= 11;
	bool 			isPublic 		= 12;
	string 			description 	= 13;
	string 			rules 			= 14;
	string 			resource 		= 15;
	bool   			reorganizes 	= 16; 
	HackathonState 	state 			= 17;
	int64 			maximumQuantity = 18;
    int64  			createdAt   	= 19;
    int64  			updatedAt   	= 20;
    int64  			startAt 	   	= 21;
    int64  			dueAt 	   		= 22;
	string 			organizeId 		= 23;
	bool 			is_deleted 		= 24;
}

message HackathonListProtoReq {
    PaginateProtoReq paginate = 1;
    optional string  name 	  = 2;
}

message HackathonListProtoRes {
    repeated HackathonBase hackathons = 1;
    PaginateProtoModel     paginate   = 2; 
}

message GetHackathonByIdProtoReq {
    string id = 1;
}


message CreateHackathonProtoReq {
    string 	name 	   	= 1;
    int64 	feeToJoin	= 2;
	string 	organizeId 	= 3;
	string 	owner 		= 4;
}

message ReCreateHackathonProtoReq {
	string 				id 			= 1;
    string 				name 	   	= 2;
	optional int64 		feeToJoin	= 3;
}

message UpdateHackathonProtoReq {
    string 						id 			 	= 1;
    optional string 			name 	   		= 2;
	optional string 			owner 	   		= 3;
	optional int64  			feeToJoin 		= 4;
	optional HackathonType		hackathonType 	= 5;
	optional string 			url 			= 6;
	optional string 			logo 			= 7;
	optional string 			tagline 		= 8;
	repeated string 			hackathonTag 	= 9;
	optional string 			contactEmail 	= 10;
	optional string 			thumbnail  		= 11;
	optional bool 				isPublic 		= 12;
	optional string 			description 	= 13;
	optional string 			rules 			= 14;
	optional string 			resource 		= 15;
	optional bool   			reorganizes 	= 16; 
	optional HackathonState 	state 			= 17;
	optional int64 				maximumQuantity = 18;
    optional int64  			startAt 	   	= 19;
    optional int64  			dueAt 	   		= 20;
}

message DeleteHackathonProtoReq {
    string id = 1;
}

/* tblHackathonTags */
message HackathonTagBase {
	string id 			= 1;
	string tagName 		= 2;
	string description 	= 3;
}

message HackathonTagListRes {
	repeated HackathonTagBase hackathonTags = 1;
}

message GetHackathonTagByIdReq {
	string id = 1;
}

message GetHackathonTagListReq {
	optional string tagName = 1;
}


message UpdateHackathonTagProtoReq {
	string id 						= 1;
	optional string tagName 		= 2;
	optional string description 	= 3;
}

message DeleteHackathonTagProtoReq {
	string id = 1;
}


message CreateHackathonTagProtoReq {
	string tagName = 1;
	string description = 2;
}

/* tblMails */
message MailBase {
	string 	hackathonId 	= 1;
	int64 	timeSetting 	= 2;
	string 	subject 		= 3;
	string	content 		= 4;
	bool	isSend 			= 5;
}

message GetMailByIdReq {
	string 	hackathonId 	= 1;
}

message CreateMailProtoReq {
	string 	hackathonId 	= 1;
	int64 	timeSetting 	= 2;
	string 	subject 		= 3;
	string	content 		= 4;
	bool	isSend 			= 5;
}

message UpdateMailProtoReq {
	string 				hackathonId 	= 1;
	optional int64 		timeSetting 	= 2;
	optional string 	subject 		= 3;
	optional string		content 		= 4;
	optional bool		isSend 			= 5; 
}

message DeleteMailProtoReq {
	string hackathonId = 1;
}

/* tblRequirement */

message RequirementBase {
	string 						hackathonId 		= 1;
	repeated string 			inviteOnly 			= 2;
	repeated string 			occupationId 		= 3;
	repeated user_service.Level level 				= 4;
	int64 						teamMemberLimit 	= 5;
	int64 						minimumTeamSize 	= 6;
	repeated int64				countries			= 7;
	repeated int64 				excluded_countries 	= 8;

}

message GetRequirementProtoReq {
	string hackathonId = 1;
}

message CreateRequirementProtoReq {
	string 						hackathonId 		= 1;
	repeated string 			inviteOnly 			= 2;
	repeated string 			occupationId 		= 3;
	repeated user_service.Level level 				= 4;
	int64 						teamMemberLimit 	= 5;
	int64 						minimumTeamSize 	= 6;
	repeated int64				countries			= 7;
	repeated int64 				excluded_countries 	= 8;
}

message UpdateRequirementProtoReq {
	string 						hackathonId 		= 1;
	repeated string 			inviteOnly 			= 2;
	repeated string 			occupationId 		= 3;
	repeated user_service.Level level 				= 4;
	optional int64 				teamMemberLimit 	= 5;
	optional int64 				minimumTeamSize 	= 6;
	repeated int64				countries			= 7;
	repeated int64 				excluded_countries 	= 8;
}

message DeleteRequirementProtoReq {
	string hackathonId = 1;
}

/* tblTrack */

message TrackBase {
	string 	trackId 		= 1;
	string 	hackathonId 	= 2;
	string 	sponsor 		= 3;
	string 	title 			= 4;
	string 	description		= 5;
	string 	material 		= 6;
	string 	url 			= 7;
	string	certificate		= 8;
}

message GetTrackListReq {
	optional string hackathonId = 1;
}

message GetTrackByIdReq {
	string trackId = 1;
}

message TrackListRes {
	repeated TrackBase tracks = 1;
}

message CreateTrackProtoReq {
	string 	hackathonId 	= 1;
	string 	sponsor 		= 2;
	string 	title 			= 3;
	string 	description		= 4;
	string 	material 		= 5;
	string 	url 			= 6;
	string	certificate		= 7;
}

message UpdateTrackProtoReq {
	string 				trackId 		= 1;
	optional string 	hackathonId 	= 2;
	optional string 	sponsor 		= 3;
	optional string 	title 			= 4;
	optional string 	description		= 5;
	optional string 	material 		= 6;
	optional string 	url 			= 7;
	optional string		certificate		= 8;
}

message DeleteTrackProtoReq {
	string 	trackId 		= 1;
}

/* tblPrize */

message PrizeBase {
	string 	prizeId 			= 1;
	string 	trackId 			= 2;
	int64 	winners_announced 	= 3;
	string 	name 				= 4;
	int64 	prize 				= 5;
	string 	winner				= 6;		// fk team_id
}

message GetPrizeListReq {
	string trackId = 1;
	optional string name = 2;
}
message GetPrizeByIdReq {
	string prizeId = 1;
}

message PrizeListRes {
	repeated PrizeBase prizes = 1;
}

message CreatePrizeProtoReq {
	string 	trackId 			= 1;
	int64 	winners_announced 	= 2;
	string 	name 				= 3;
	int64 	prize 				= 4;
}

message UpdatePrizeProtoReq {
	string 	prizeId 					= 1;
	optional int64 winners_announced 	= 2;
	optional string name 				= 3;
	optional int64 prize 				= 4;
	optional string winner 				= 5;
}

message DeletePrizeProtoReq {
	string 	prizeId 		= 1;
}

/* tblJudge */

message JudgeBase {
	string 	hackathonId = 1;
	string 	userId 		= 2;
	string 	title 		= 3;
	string 	photo		= 4;
	string 	profile 	= 5;
	string 	organize 	= 6;
}

message GetJudgeListReq {
	string hackathonId = 1;
	optional string userId = 2;
}


message JudgeListRes {
	repeated JudgeBase judges = 1;
}

message CreateJudgeProtoReq {
	string 	hackathonId = 1;
	string 	userId 		= 2;
}

message UpdateJudgeProtoReq {
	string 				hackathonId = 1;
	string 				userId 		= 2;
	optional string 	title 		= 3;
	optional string 	photo 		= 4;
	optional string 	profile		= 5;
	optional string 	organize 	= 6;

}

message DeleteJudgeProtoReq {
	string 				hackathonId = 1;
	string 				userId 		= 2;
}


message Empty {}




//// Form 
enum FormQuestionTypeProtoModel {
    MultiChoice                         = 0;
    ShortText                         	= 1;
    TrueFalse                           = 2;
    Dropdown                         	= 3;
    SingleChoice                        = 4;
    Paragraph                        	= 5;
	FileUpload							= 6;
}

message FormProtoModel {
    string form_id           		= 1;
    optional string name         	= 2;
	string title 			 		= 3;
    optional string description  	= 4;
	optional string course_id 		= 5;
    int64  createdAt    			= 6;
    int64  updatedAt    			= 7;
    bool   is_deleted   			= 8;
}

message CreateFormProtoReq {
    optional string name         = 1;
	string title 			     = 2;
    optional string description  = 3;
	optional string course_id 	 = 4;

}

message GetFormByIdProtoReq {
    string form_id           = 1;
}

message GetFormByIdProtoRes {
    FormProtoModel form_info           			= 1;
	repeated FormQuestionProtoModel questions 	= 2;
}

message GetFormListProtoReq {
	optional string form_id    = 1;
    optional string name       = 2;
	optional string title 	   = 3;
	optional string course_id  = 4;
	optional int64  offset     = 5;
    optional int64  limit      = 6;
}

message GetFormListProtoRes {
    repeated FormProtoModel forms = 1;
}

message UpdateFormProtoReq {
    string            form_id     = 1;
    optional string   name        = 2;
	optional string   title		  = 3;
    optional string   description = 4;
}

message DeleteFormProtoReq {
    string form_id           = 1;
}

// FormQuestion

message FormQuestionProtoModel {
    string              question_id        		= 1;
    string              title              		= 2;
    FormQuestionTypeProtoModel  question_type   = 3;
    optional string     description     		= 4;
    string              question        		= 5;
    repeated string     answer   				= 6;
    int64               createdAt       		= 7;
    int64               updatedAt       		= 8;
    bool                is_deleted     		 	= 9;
    int64               paginationId    		= 10;
	string 				form_id 				= 11;
	int64 				question_index			= 12;
	bool 				is_required 			= 13;
	bool 				is_other_answer			= 14;
}

message CreateFormQuestionProtoReq {
    string              title           			= 1;
    FormQuestionTypeProtoModel  question_type       = 2;
    optional string     description     			= 3;
    string              question        			= 4;
    repeated string     answer   					= 5;
	string 				form_id 					= 6;
	optional int64 		question_index				= 7;
	optional bool 		is_required 				= 8;
	optional bool 		is_other_answer				= 9;
}

message GetFormQuestionByIdProtoReq {
    string  question_id  = 1;
}


message UpdateFormQuestionProtoReq {
	string 							form_id					= 1;
    string                          question_id         	= 2;
    optional string                 title           		= 3;
    optional FormQuestionTypeProtoModel     question_type   = 4;
    optional string                 description     		= 5;
    optional string                 question        		= 6;
    repeated string                 answer   				= 7;
	optional int64 					question_index			= 8;
	optional bool 					is_required 			= 9;
	optional bool 					is_other_answer			= 10;
}

message DeleteFormQuestionProtoReq {
    string  question_id  = 1;
}


// submission

message FormQuestionSubmissionProtoModel {
    string              question_id        		= 1;
    string              title              		= 2;
    FormQuestionTypeProtoModel  question_type   = 3;
    optional string     description     		= 4;
    string              question        		= 5;
    repeated string     answer   				= 6;
	repeated string		user_answer 			= 7;
    int64               createdAt       		= 8;
    int64               updatedAt       		= 9;
    bool                is_deleted     		 	= 10;
    int64               paginationId    		= 11;
	string 				form_id 				= 12;
	int64 				question_index			= 13;
	bool 				is_required 			= 14;
	optional string 	other_answer			= 15;
}

message FormSubmissionProtoModel{
    string id                               					= 1;
    string form_id                     							= 2;
    string user_id                          					= 3;
    repeated FormQuestionSubmissionProtoModel form_questions   	= 4;
	int64  paginationId    										= 5;
    int64  createdAt    										= 6;
    int64  updatedAt    										= 7;
    bool   is_deleted   										= 8;

}

message GetFormSubmissionByIdProtoReq{
    string id   = 1;
}

message GetFormSubmissionListReq{
    string form_id 				= 1; 
	optional string user_id 	= 2;
	optional int64  offset    	= 3;
    optional int64  limit      	= 4;
}

message GetFormSubmissionListRes{
    repeated FormSubmissionProtoModel form_submissions = 1;
}

message CreateFormSubmissionProtoReq{
    string form_id                     							= 1;
    string user_id                          					= 2;
    repeated FormQuestionSubmissionProtoModel form_questions   	= 3;
}

message DeleteFormSubmissionProtoReq{
    string id = 1;
}

message LessonFormsProtoModel {
	optional string form_id 		= 1;
}

message GetLessonFormsProtoReq {
	string lesson_id 	= 1;
}

message CreateLessonFormsProtoReq {
	string lesson_id  	= 1;
	string form_id 		= 2;
}

message DeleteLessonFormsProtoReq {
	string lesson_id 	= 1;
}

service HackathonServiceProtocol {
    rpc GetHackathonCall(HackathonListProtoReq) 	   returns (HackathonListProtoRes);
    rpc GetHackathonByIdCall(GetHackathonByIdProtoReq) returns (HackathonBase);
    rpc CreateHackathonCall(CreateHackathonProtoReq)   returns (HackathonBase);
	rpc ReCreateHackathonCall(ReCreateHackathonProtoReq) returns (HackathonBase);
    rpc UpdateHackathonCall(UpdateHackathonProtoReq)   returns (HackathonBase);
    rpc DeleteHackathonCall(DeleteHackathonProtoReq)   returns (Empty);
	rpc RemoveHackathonCall(DeleteHackathonProtoReq)   returns (Empty);
	rpc RestoreHackathonCall(DeleteHackathonProtoReq)   returns (Empty);
	//rpc AddModeratorHackathonCall(AddModeratorProtoReq) returns (Empty);
	//rpc ViewModeratorHackathonCall(ViewModeratorProtoReq) returns (user_service.UserList);

	// Hackathon_tag
	rpc GetHackathonTagsCall(GetHackathonTagListReq) returns (HackathonTagListRes);
	rpc GetHackathonTagByIdCall(GetHackathonTagByIdReq) returns (HackathonTagBase);
	rpc CreateHackathonTagCall(CreateHackathonTagProtoReq) returns (HackathonTagBase);
	rpc UpdateHackathonTagCall(UpdateHackathonTagProtoReq) returns (HackathonTagBase);
	rpc DeleteHackathonTagCall(DeleteHackathonTagProtoReq) returns (Empty);

	// Hackathon_mail
	rpc GetMailByIdCall(GetMailByIdReq) returns (MailBase);
	rpc CreateMailCall(CreateMailProtoReq) returns (MailBase);
	rpc UpdateMailCall(UpdateMailProtoReq) returns (MailBase);
	rpc DeleteMailCall(DeleteMailProtoReq) returns (Empty);

	// Hackathon_requirement
	rpc GetRequirementByIdCall(GetRequirementProtoReq) returns (RequirementBase);
	rpc CreateRequirementCall(CreateRequirementProtoReq) returns (RequirementBase);
	rpc UpdateRequirementCall(UpdateRequirementProtoReq) returns (RequirementBase);
	rpc DeleteRequirementCall(DeleteRequirementProtoReq) returns (Empty);

	// Hackathon_Track
	rpc GetTracksCall(GetTrackListReq) returns (TrackListRes);
	rpc GetTrackByIdCall(GetTrackByIdReq) returns (TrackBase);
	rpc CreateTrackCall(CreateTrackProtoReq) returns (TrackBase);
	rpc UpdateTrackCall(UpdateTrackProtoReq) returns (TrackBase);
	rpc DeleteTrackCall(DeleteTrackProtoReq) returns (Empty);

	// Hackathon_Prize
	rpc GetPrizesCall(GetPrizeListReq) returns (PrizeListRes);
	rpc GetPrizeByIdCall(GetPrizeByIdReq) returns (PrizeBase);
	rpc CreatePrizeCall(CreatePrizeProtoReq) returns (PrizeBase);
	rpc UpdatePrizeCall(UpdatePrizeProtoReq) returns (PrizeBase);
	rpc DeletePrizeCall(DeletePrizeProtoReq) returns (Empty);

	// Judge
	rpc GetJudgesCall(GetJudgeListReq) returns (JudgeListRes);
	rpc CreateJudgeCall(CreateJudgeProtoReq) returns (JudgeBase);
	rpc UpdateJudgeCall(UpdateJudgeProtoReq) returns (JudgeBase);
	rpc DeleteJudgeCall(DeleteJudgeProtoReq) returns (Empty);


	// Form 
	rpc CreateFormCall(CreateFormProtoReq) returns (FormProtoModel);
	rpc GetFormByIdCall(GetFormByIdProtoReq) returns (GetFormByIdProtoRes);
	rpc GetFormListCall(GetFormListProtoReq) returns (GetFormListProtoRes);
	rpc UpdateFormCall(UpdateFormProtoReq) returns (FormProtoModel);
	rpc DeleteFormCall(DeleteFormProtoReq) returns (Empty);

	rpc CreateFormQuestionCall(CreateFormQuestionProtoReq) returns (FormQuestionProtoModel);
	rpc GetFormQuestionByIdCall(GetFormQuestionByIdProtoReq) returns (FormQuestionProtoModel);
	rpc UpdateFormQuestionCall(UpdateFormQuestionProtoReq) returns (FormQuestionProtoModel);
	rpc DeleteFormQuestionCall(DeleteFormQuestionProtoReq) returns (Empty);

	rpc GetFormSubmissionByIdCall(GetFormSubmissionByIdProtoReq) returns(FormSubmissionProtoModel);
	rpc GetFormSubmissionListCall(GetFormSubmissionListReq) returns (GetFormSubmissionListRes);
	rpc CreateFormSubmissionCall(CreateFormSubmissionProtoReq) returns(FormSubmissionProtoModel);
	rpc DeleteFormSubmissionCall(DeleteFormSubmissionProtoReq) returns(Empty);

	rpc GetLessonFormsCall(GetLessonFormsProtoReq) returns(LessonFormsProtoModel);
	rpc CreateLessonFormsCall(CreateLessonFormsProtoReq) returns(Empty);
	rpc DeleteLessonFormsCall(DeleteLessonFormsProtoReq) returns(Empty);
}
