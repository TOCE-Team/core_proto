syntax = "proto3";

package hackathon_service;

message HackathonProtoModel {
    string id = 1;
    string name = 2;
    string detail = 3; 
    string resource = 4;
    string category = 5;
    bool reorganizes = 6;
    bool status = 7;
    int64 createdAt = 8;
    int64 updatedAt = 9;
    int64 startAt = 10;
    int64 dueAt = 11;
}
/*hackthon*/
message HackathonListProtoRes {
    repeated HackathonProtoModel hackathons = 1;
}

message GetHackathonByIdProtoReq {
    string id = 1;
}

message CreateHackathonProtoReq {
    string name = 1;
    string detail = 2; 
    string resource = 3;
    string category = 4;
    bool reorganizes = 5;
    bool status = 6;
    int64 createdAt = 7;
    int64 updatedAt = 8;
    int64 startAt = 9;
    int64 dueAt = 10;
}

message UpdateHackathonProtoReq {
    string id = 1;
    optional string newName = 2;
    optional string newDetail = 3; 
    optional string newResource = 4;
    optional string newCategory = 5;
    optional bool newReorganizes = 6;
    optional bool newStatus = 7;
    optional int64 newStartAt = 8;
    optional int64 newDueAt = 9;
    int64 updatedAt = 10;
}

message DeleteHackathonProtoReq {
    string id = 1;
}

/*organize*/

message OrgProtoModel {
	string id = 1;
	string name = 2;
	string chain = 3;
	string organize = 4;
	string detail = 5;
	bool official = 6;
}


message OrgListProtoRes {
	repeated OrgProtoModel org = 1;
}

message GetOrgByIdProtoReq{
	string id = 1;
}

message CreateOrgProtoReq {
	string name = 1;	
	string chain = 2;
	string organize = 3;
	string detail = 4;
	bool official = 5;
}

message UpdateOrgProtoReq {
	string id = 1;
	optional string name = 2;
	optional string chain = 3;
	optional string organize = 4;
	optional string detail = 5;
	optional bool official = 6;
}

message DeleteOrgProtoReq {
	string id = 1;
}

message Empty {}

service HackathonServiceProtocol {
    rpc GetHackathonCall(Empty) returns (HackathonListProtoRes);
    rpc GetHackathonByIdCall(GetHackathonByIdProtoReq) returns (HackathonProtoModel);
    rpc CreateHackathonCall(CreateHackathonProtoReq) returns (HackathonProtoModel);
    rpc UpdateHackathonCall(UpdateHackathonProtoReq) returns (HackathonProtoModel);
    rpc DeleteHackathonCall(DeleteHackathonProtoReq) returns (Empty);
	rpc GetOrgsCall(Empty) returns (OrgListProtoRes);
	rpc GetOrgByIdCall(GetOrgByIdProtoReq) returns (OrgProtoModel);
	rpc CreateOrgCall(CreateOrgProtoReq) returns (OrgProtoModel);
	rpc UpdateOrgCall(UpdateOrgProtoReq) returns (OrgProtoModel);
	rpc DeleteOrgCall(DeleteOrgProtoReq) returns (Empty);

}
